#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#define data(tree) ((tree)->data)
#define left(tree) ((tree)->left)
#define right(tree) ((tree)->right)

typedef int item;
typedef struct Node* Tree;
typedef struct Node{
	item data;
	Tree left, right;
}Node;


//create a new node
Tree newNode(item data){
	Node p = malloc(sizeof(Node));
	assert(p != NULL);
	data(tree) = data;
	left(tree) = right(tree) = NULL;
	return p;
}


//create a enpty tree
Tree newTree(){
	return NULL;
}

//free all nodes
void freeTree(Tree tree){
	if (t != NULL){
		freeTree(left(tree));
		freeTree(right(tree));
		free(tree); 
	}
}

//show the tree
void showTree(Tree t, int depth){
	printf("%d\n", data(t));
	*depth++;
	if (t != NULL){
		showTree(right(t), depth + 1);
		int i;
		for (i = 0 ; i < depth; ++i){
			printf('\t');
			printf("%d\n", data(t));
			showTree(left(t), depth + 1);
		}
	}
}

//count the numvber of nodes
int numOfNodes(Tree t){
	if (t != NULL){
		return numsOfNodes(left(t)) + numsOfNodes(right(t)) + 1;
	}
	return 0;
}

//search items in BST
bool treeSearch(Tree t, item val){
	if (t == NULL){
		return false;
	}
	if (data(t) > val){
		return treeSearch(left(tree), val);
	}else if (data(t) < val){
		return treeSearch(right(tree), val);
	}else{
		return true;
	}
}

//insert nodes
//the value of left child is always smaller than the value of root, while the value of 
//right child is always larger than that of root.
void insertTree(Tree t, item val){
	if (t == NULL){
		return newNode(val);
	}
	if ((data(t)) > val){
		left(t) = insertTree(left(t), item val);
	}else if( data(t) < val){
		right(t) = insertTree(right(t), item val);
	}
}

//concatenate two trees
//find the min node of t2
//elevate the min node to be the root node, while its left child is t1 and its right child is t2
Tree joinTree(Tree t1, Tree t2){
	if (t1 == NULL){
		return t2;
	}
	if (t2 == NULL){
		return t1;
	}
	Tree t = t2;
	Tree parent = NULL;
	while (left(t)){
		parent = t;
		t = left(t);
	}
	if (parent != NULL){
		left(parent) = right(t);	
		right(t) = t2;
	}
	left(t) = t1;
	return t2;
} 

//delete a node, which is harder
Tree deleteTree(Tree t1, item it){
	if (t1 != NULL){
		if (it < data(t1)){
			deleteTree(left(t1));
		}else if (it > data(t1)){
			deleteTree(right(t1));
		}else{
			//have four different cases
			Tree newNode;
			if (left(t1) == NULL && right(t1) == NULL){
				newNode = NULL
			}
			else if (left(t1) == NULL){
				newNode = right(t1);
			}
			else if (right(t1) == NULL){
				newNode = left(t1);
			}else{
				newNode = join(left(t1), right(t1))
			}
			free(t1);
			t1 = newNode;
		}		
	}
	return t1

}

